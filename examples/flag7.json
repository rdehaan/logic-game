{
  "aux_program": "% Predicates for (adjacent) cells\ncell(R,C) :- setting(row(R)), setting(col(C)).\ndirection(left;right;up;down).\nmovement(R,C,R,C+1,right) :- cell(R,C), cell(R,C+1).\nmovement(R,C,R,C-1,left) :- cell(R,C), cell(R,C-1).\nmovement(R,C,R+1,C,down) :- cell(R,C), cell(R+1,C).\nmovement(R,C,R-1,C,up) :- cell(R,C), cell(R-1,C).\nadjacent(R1,C1,R2,C2) :- direction(D), movement(R1,C1,R2,C2,D).\n\n% Waypoints\nwaypoint(1..3).\nmax_waypoint(W) :- waypoint(W), not waypoint(W+1).",
  "level_gen_program": "% The game is played on a 8x6 grid\n#const w=8.\n#const h=6.\n#const n=w*h.\nsetting(grid_width(w)).\nsetting(grid_height(h)).\nsetting(row(1..H)) :- setting(grid_height(H)).\nsetting(col(1..W)) :- setting(grid_width(W)).\n\n% Time bound: 2*n steps\nsetting(time_bound(2*n)).\n\n% Player is randomly placed\n1 { at(R,C,player) : cell(R,C) } 1.\n% Flag is randomly placed\n1 { at(R,C,flag) : cell(R,C) } 1.\n% Waypoints are randomly placed\n1 { at(R,C,waypoint(W)) : cell(R,C) } 1 :- waypoint(W).\n% ... but not directly adjacent\n:- at(R1,C1,I1), at(R2,C2,I2), I1 != I2, adjacent(R1,C1,R2,C2),\n    I1 != tree, I2 != tree.\n\n% Player and flag are not too close\n:- at(R1,C1,player), at(R2,C2,flag),\n    |R1-R2| + |C1-C2| <= 4.\n% Different waypoints are not too close\n:- at(R1,C1,waypoint(W1)), at(R2,C2,waypoint(W2)), W1 < W2,\n    |R1-R2| + |C1-C2| <= 4.\n\n% Several are placed at random\n15 { at(R,C,tree) : cell(R,C) } 15.\n% ... but not horizontally/vertically adjacent to each other\n:- adjacent(R1,C1,R2,C2), at(R1,C1,tree), at(R2,C2,tree).\n% ... and so that every cell contains at most one item\n:- at(R,C,I1), at(R,C,I2), I1 != I2.\n\n% ... and so that there are (tree-free) paths from the player\n% to the subsequent waypoints and to the flag\nreachable(R,C,R,C) :- cell(R,C), not at(R,C,tree).\nreachable(R1,C1,R3,C3) :-\n    cell(R1,C1), cell(R2,C2), cell(R3,C3),\n    reachable(R1,C1,R2,C2),\n    not at(R3,C3,waypoint(W)) : waypoint(W);\n    not at(R3,C3,tree), not at(R3,C3,flag),\n    adjacent(R2,C2,R3,C3).\nfinal_reachable(R1,C1,R3,C3) :-\n    cell(R1,C1), cell(R2,C2), cell(R3,C3),\n    reachable(R1,C1,R2,C2),\n    not at(R3,C3,tree), adjacent(R2,C2,R3,C3).\n:- not final_reachable(R1,C1,R2,C2),\n    at(R1,C1,player), at(R2,C2,waypoint(1)).\n:- not final_reachable(R1,C1,R2,C2),\n    at(R1,C1,waypoint(W1)), at(R2,C2,waypoint(W1+1)),\n    waypoint(W1), waypoint(W1+1).\n:- not final_reachable(R1,C1,R2,C2),\n    at(R1,C1,waypoint(W)), at(R2,C2,flag),\n    max_waypoint(W).\n\n% Randomize level generation\n#heuristic at(RANDINT(1,8),RANDINT(1,12),player). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),flag). [10,true]\n#heuristic at(RANDINT(1,6),RANDINT(1,8),tree). [10,true]\n#heuristic at(RANDINT(1,6),RANDINT(1,8),tree). [10,true]\n#heuristic at(RANDINT(1,6),RANDINT(1,8),tree). [10,true]\n#heuristic at(RANDINT(1,6),RANDINT(1,8),tree). [10,true]\n#heuristic at(RANDINT(1,6),RANDINT(1,8),tree). [10,true]\n#heuristic at(RANDINT(1,6),RANDINT(1,8),tree). [10,true]\n\n% Visualization instructions\ndecorate(game_type,grid).\ndecorate(label,flag,font_f024).\ndecorate(label,player,font_f007).\ndecorate(label,tree,font_f1bb).\ndecorate(label,waypoint(W),W) :- waypoint(W).\ndecorate(color,waypoint(W),orange) :- waypoint(W).\ndecorate(color,tree,green).",
  "visibility_program": "% Everything is observable\nobserve(at(R,C,O)) :- at(R,C,O), not hidden(at(R,C,O)).\n\n% Except waypoints when a player is at them\nhidden(at(R,C,waypoint(W))) :- at(R,C,waypoint(W)), at(R,C,player).",
  "player_move_program": "% Hints:\n% - make a plan consisting of a path towards the flag\n% - and then follow the path",
  "nature_program": "% The player can do at most one action per time step\n:- do(X), do(Y), X != Y.\n\n% Effect of move(up;down;left;right): the player moves in the appropriate direction\nmove_result(R2,C2) :- do(move(D)), direction(D),\n    at(R1,C1,player), movement(R1,C1,R2,C2,D).\nnext(R,C,player) :- move_result(R,C).\nnext(R,C,player) :- at(R,C,player), not move_result(R',C') : cell(R',C').\n\n% The player can't pass through trees\n:- next(R,C,player), at(R,C,tree).\n\n% The flag and trees stay in place\nnext(R,C,flag) :- at(R,C,flag).\nnext(R,C,tree) :- at(R,C,tree).\n\n% Waypoints disappear as they are visited\nnext(R,C,waypoint(W)) :- at(R,C,waypoint(W)), not at(R,C,player).",
  "goal_program": "% Goal: reach the flag after visiting all waypoints\nwin :- at(R1,C1,player), at(R1,C1,flag),\n    not at(R2,C2,waypoint(W)) : cell(R2,C2), waypoint(W).\n\n% You lose if you visit the flag before all waypoints\nlose(wrong_order) :- at(R1,C1,player), at(R1,C1,flag),\n    at(R2,C2,waypoint(W)), waypoint(W).\n\n% You lose if you visit a waypoint while a previous waypoint remains to visit\nlose(wrong_order) :- at(R1,C1,player), at(R1,C1,waypoint(W1)),\n    at(R2,C2,waypoint(W2)), W2 < W1.\n\n% You lose if time runs out..\nlose(timeout) :- current_time(T), setting(time_bound(S)), T >= S.",
  "level_state": "at(6,1,tree).\nat(3,1,tree).\nat(2,8,tree).\nat(6,8,tree).\nat(3,3,tree).\nat(6,7,player).\nat(1,1,tree).\nat(4,2,tree).\nat(1,3,tree).\nat(5,3,tree).\nat(6,4,tree).\nat(2,5,tree).\nat(4,5,tree).\nat(5,6,tree).\nat(3,7,tree).\nat(4,8,tree).\nat(4,3,waypoint(1)).\nat(1,4,flag).\nat(1,6,waypoint(2)).\nat(5,8,waypoint(3)).",
  "level_settings": "setting(grid_width(8)).\nsetting(grid_height(6)).\nsetting(time_bound(96)).\nsetting(col(1)).\nsetting(col(2)).\nsetting(col(3)).\nsetting(col(4)).\nsetting(col(5)).\nsetting(col(6)).\nsetting(col(7)).\nsetting(col(8)).\nsetting(row(1)).\nsetting(row(2)).\nsetting(row(3)).\nsetting(row(4)).\nsetting(row(5)).\nsetting(row(6)).\ndecorate(label,flag,font_f024).\ndecorate(label,player,font_f007).\ndecorate(label,tree,font_f1bb).\ndecorate(color,tree,green).\ndecorate(color,waypoint(1),orange).\ndecorate(color,waypoint(2),orange).\ndecorate(color,waypoint(3),orange).\ndecorate(label,waypoint(1),1).\ndecorate(label,waypoint(2),2).\ndecorate(label,waypoint(3),3).\ndecorate(game_type,grid)."
}
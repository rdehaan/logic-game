{
  "aux_program": "% Predicates for (adjacent) cells\ncell(R,C) :- setting(row(R)), setting(col(C)).\ndirection(left;right;up;down).\nmovement(R,C,R,C+1,right) :- cell(R,C), cell(R,C+1).\nmovement(R,C,R,C-1,left) :- cell(R,C), cell(R,C-1).\nmovement(R,C,R+1,C,down) :- cell(R,C), cell(R+1,C).\nmovement(R,C,R-1,C,up) :- cell(R,C), cell(R-1,C).\nadjacent(R1,C1,R2,C2) :- direction(D), movement(R1,C1,R2,C2,D).",
  "level_gen_program": "% The game is played on a 12x8 grid\n#const w=12.\n#const h=8.\n#const n=w*h.\nsetting(grid_width(w)).\nsetting(grid_height(h)).\nsetting(row(1..H)) :- setting(grid_height(H)).\nsetting(col(1..W)) :- setting(grid_width(W)).\n\n% Time bound: 100 steps\nsetting(time_bound(100)).\n\n% Player is randomly placed\n1 { at(R,C,player) : cell(R,C) } 1.\n% Flag is randomly placed\n1 { at(R,C,flag) : cell(R,C) } 1.\n% Player and flag are not too close\ndistance(D) :- at(R1,C1,player), at(R2,C2,flag),\n    D = |R1-R2| + |C1-C2|.\n:- distance(D), D <= 3.\n\n% Trees are placed at random\nn/4 { at(R,C,tree) : setting(row(R)), setting(col(C)) } n/4.\n% ... but not on flag or player\n:- at(R,C,player), at(R,C,tree).\n:- at(R,C,flag), at(R,C,tree).\n% ... and not horizontally/vertically adjacent to each other\n:- adjacent(R1,C1,R2,C2), at(R1,C1,tree), at(R2,C2,tree).\n% ... and so that all non-tree cells are reachable from each other\n% ... by a path of length at most n\n1 { rank(R,C,0..n/2) } 1 :- cell(R,C), not at(R,C,tree).\n:- cell(R,C), at(R,C,player), not rank(R,C,0).\n:- cell(R1,C1), not at(R1,C1,player), not at(R1,C1,tree),\n    M = #min { L : rank(R2,C2,L), adjacent(R1,C1,R2,C2) },\n    not rank(R1,C1,M+1).\n\n% Randomize level generation\n#heuristic at(RANDINT(1,8),RANDINT(1,12),player). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),flag). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),tree). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),tree). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),tree). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),tree). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),tree). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),tree). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),tree). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),tree). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),tree). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),tree). [10,true]\n\n% Visualization instructions\ndecorate(game_type,grid).\ndecorate(label,flag,font_f024).\ndecorate(label,player,font_f007).\ndecorate(label,tree,font_f1bb).\ndecorate(color,tree,green).",
  "visibility_program": "% 'Fog-of-war' is a ring of one around the player\nobserve(fog(R1,C1)) :-\n    setting(row(R1)), setting(col(C1)),\n    at(R2,C2,player), |C1-C2| >= 2.\nobserve(fog(R1,C1)) :-\n    setting(row(R1)), setting(col(C1)),\n    at(R2,C2,player), |R1-R2| >= 2.\nobserve(at(R,C,O)) :- at(R,C,O), not observe(fog(R,C)).",
  "player_move_program": "% Number cells for tie-breaking\ncell_no(R,C,N) :- setting(grid_width(W)), cell(R,C), N = (W*(R-1))+C.\n\n% Remember where you've seen what\nremember(at(R,C,empty)) :- cell(R,C), not observe(fog(R,C)),\n    not observe(at(R,C,tree)), not observe(at(R,C,flag)).\nremember(at(R,C,tree)) :- observe(at(R,C,tree)).\nremember(at(R,C,flag)) :- observe(at(R,C,flag)).\nmemory(at(R,C,O)) :- remember(at(R,C,O)).\nunknown(R,C) :- cell(R,C),\n    not memory(at(R,C,empty)),\n    not memory(at(R,C,tree)),\n    not memory(at(R,C,flag)).\n\n% Consider where the player *can* next move to\npossible_target(PR,PC) :-\n    cell(PR,PC), not memory(at(PR,PC,tree)),\n    observe(at(R,C,player)), adjacent(R,C,PR,PC).\n\n% Choose among those that are on a shortest path to a\n% yet unexplored cell..\nmax_path_length(M) :- setting(grid_width(W)), setting(grid_height(H)), M=W+H.\npath_length(0..M) :- max_path_length(M).\nreachable_within(PR,PC,PR,PC,1) :- possible_target(PR,PC).\nreachable_within(PR,PC,R1,C1,I) :-\n    possible_target(PR,PC), path_length(I),\n    cell(R1,C1), reachable_within(PR,PC,R2,C2,I-1),\n    adjacent(R1,C1,R2,C2), memory(at(R2,C2,empty)).\nselect_possible_target(PR,PC) :-\n    not path_to_flag_known,\n    reachable_within(PR,PC,R,C,I), unknown(R,C),\n    not reachable_within(PR',PC',R',C',J) :\n        possible_target(PR',PC'), unknown(R',C'), path_length(J), J < I.\n\n% Or if you know how to get to the flag..\npath_to_flag_known :-\n    reachable_within(PR,PC,R,C,I),\n    possible_target(PR,PC), path_length(I),\n    memory(at(R,C,flag)).\nselect_possible_target(PR,PC) :-\n    path_to_flag_known,\n    reachable_within(PR,PC,R,C,I), memory(at(R,C,flag)),\n    not reachable_within(PR',PC',R',C',J) :\n        possible_target(PR',PC'), memory(at(R',C',flag)), path_length(J), J < I.\n\n% .. and pick one of these (using tie-breaking if needed) ..\ntarget(R,C) :- select_possible_target(R,C),\n    not select_possible_target(R',C') : cell(R',C'), (R',C') < (R,C).\n\n% .. and move towards it\ndo(move(down)) :- observe(at(R,C,player)), target(R+1,C).\ndo(move(up)) :- observe(at(R,C,player)), target(R-1,C).\ndo(move(left)) :- observe(at(R,C,player)), target(R,C-1).\ndo(move(right)) :- observe(at(R,C,player)), target(R,C+1).\n",
  "nature_program": "% The player can do at most one action per time step\n:- do(X), do(Y), X != Y.\n\n% Effect of move(up;down;left;right): the player moves in the appropriate direction\nmove_result(R2,C2) :- do(move(D)), direction(D),\n    at(R1,C1,player), movement(R1,C1,R2,C2,D).\nnext(R,C,player) :- move_result(R,C).\nnext(R,C,player) :- at(R,C,player), not move_result(R',C') : cell(R',C').\n\n% Can't run through trees\n:- next(R,C,player), at(R,C,tree).\n\n% Flag and trees stays in place\nnext(R,C,flag) :- at(R,C,flag).\nnext(R,C,tree) :- at(R,C,tree).",
  "goal_program": "% Goal: reach the flag\nwin :- at(R,C,player), at(R,C,flag).\n\n% You lose if time runs out..\nlose(timeout) :- current_time(T), setting(time_bound(S)), T >= S.",
  "level_state": "at(1,7,tree).\nat(4,11,tree).\nat(5,10,tree).\nat(7,7,tree).\nat(1,12,tree).\nat(4,1,tree).\nat(7,12,tree).\nat(4,7,tree).\nat(5,8,player).\nat(8,1,tree).\nat(7,2,tree).\nat(2,3,tree).\nat(5,3,tree).\nat(8,3,tree).\nat(1,4,tree).\nat(3,4,tree).\nat(6,4,tree).\nat(2,5,tree).\nat(5,5,tree).\nat(6,6,tree).\nat(3,8,tree).\nat(6,8,tree).\nat(8,8,tree).\nat(2,9,tree).\nat(7,9,tree).\nat(1,1,flag).",
  "level_settings": "setting(grid_width(12)).\nsetting(grid_height(8)).\nsetting(time_bound(100)).\nsetting(col(1)).\nsetting(col(2)).\nsetting(col(3)).\nsetting(col(4)).\nsetting(col(5)).\nsetting(col(6)).\nsetting(col(7)).\nsetting(col(8)).\nsetting(col(9)).\nsetting(col(10)).\nsetting(col(11)).\nsetting(col(12)).\nsetting(row(1)).\nsetting(row(2)).\nsetting(row(3)).\nsetting(row(4)).\nsetting(row(5)).\nsetting(row(6)).\nsetting(row(7)).\nsetting(row(8)).\ndecorate(game_type,grid).\ndecorate(label,flag,font_f024).\ndecorate(label,player,font_f007).\ndecorate(label,tree,font_f1bb).\ndecorate(color,tree,green)."
}
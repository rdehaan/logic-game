{
  "aux_program": "% Predicates for (adjacent) cells\ncell(R,C) :- setting(row(R)), setting(col(C)).\ndirection(left;right;up;down).\nopposite_direction(left,right).\nopposite_direction(up,down).\nopposite_direction(D1,D2) :- opposite_direction(D2,D1).\nmovement(R,C,R,C+1,right) :- cell(R,C), cell(R,C+1).\nmovement(R,C,R,C-1,left) :- cell(R,C), cell(R,C-1).\nmovement(R,C,R+1,C,down) :- cell(R,C), cell(R+1,C).\nmovement(R,C,R-1,C,up) :- cell(R,C), cell(R-1,C).\nadjacent(R1,C1,R2,C2) :- direction(D), movement(R1,C1,R2,C2,D).",
  "level_gen_program": "% The game is played on a 16x12 grid\n#const w=12.\n#const h=8.\n#const n=w*h.\nsetting(grid_width(w)).\nsetting(grid_height(h)).\nsetting(row(1..H)) :- setting(grid_height(H)).\nsetting(col(1..W)) :- setting(grid_width(W)).\n\ncell(R,C) :- setting(row(R)), setting(col(C)).\ndirection(left;right;up;down).\nmovement(R,C,R,C+1,right) :- cell(R,C), cell(R,C+1).\nmovement(R,C,R,C-1,left) :- cell(R,C), cell(R,C-1).\nmovement(R,C,R+1,C,down) :- cell(R,C), cell(R+1,C).\nmovement(R,C,R-1,C,up) :- cell(R,C), cell(R-1,C).\nadjacent(R1,C1,R2,C2) :- direction(D), movement(R1,C1,R2,C2,D).\n\n% Time bound: 100 steps\nsetting(time_bound(100)).\n\n%\n1 { num_islands(4..6) } 1.\nisland(1..N) :- num_islands(N).\n1 { topleft(R,C,I) : cell(R,C) } 1 :- island(I).\n1 { bottomright(R,C,I) : cell(R,C) } 1 :- island(I).\n:- island(I), topleft(R1,C1,I), bottomright(R2,C2,I), R1 >= R2.\n:- island(I), topleft(R1,C1,I), bottomright(R2,C2,I), C1 >= C2.\non_island(R,C,I) :- cell(R,C), island(I),\n    topleft(R1,C1,I), bottomright(R2,C2,I),\n    R1 <= R, R <= R2, C1 <= C, C <= C2.\n:- cell(R,C), on_island(R,C,I1), on_island(R,C,I2), I1 != I2.\n\n:- adjacent(R1,C1,R2,C2), on_island(R1,C1,I1), on_island(R2,C2,I2), I1 != I2.\n\nat(R,C,land) :- on_island(R,C,I), island(I).\nat(R,C,water) :- cell(R,C), not at(R,C,land).\n\n:- cell(R,C), cell(R,C+1), cell(R+1,C), cell(R+1,C+1),\n    at(R,C,water), at(R,C+1,water), at(R+1,C,water), at(R+1,C+1,water).\n\n{ connection(R,C) : cell(R,C), at(R,C,water) }.\n:- adjacent(R1,C1,R2,C2), connection(R1,C1), connection(R2,C2).\nconnection_justified(R,C) :- connection(R,C), direction(D),\n    movement(R,C,R1,C1,D1), at(R1,C1,land),\n    opposite_direction(D1,D2),\n    movement(R,C,R2,C2,D2), at(R2,C2,land).\n:- connection(R,C), not connection_justified(R,C).\n\npos_link(I1,I2) :- island(I1), island(I2), I1 < I2, connection(R,C),\n    movement(R1,C1,R,C,D), movement(R,C,R2,C2,D), direction(D),\n    on_island(R1,C1,I1), on_island(R2,C2,I2).\npos_link(I1,I2) :- pos_link(I2,I1).\ntransitive_pos_link(I1,I2) :- pos_link(I1,I2).\ntransitive_pos_link(I1,I3) :- pos_link(I1,I2), transitive_pos_link(I2,I3).\n:- island(I1), island(I2), I1 != I2, not transitive_pos_link(I1,I2).\n\n1 { at(R,C,bridge); at(R,C,broken_bridge) } 1 :- connection(R,C).\n:- B = #count { R,C : at(R,C,bridge) },\n    NB = #count { R,C : at(R,C,broken_bridge) },\n    |B-NB| > 2.\n\nlink(I1,I2) :- island(I1), island(I2), I1 < I2, at(R,C,bridge),\n    movement(R1,C1,R,C,D), movement(R,C,R2,C2,D), direction(D),\n    on_island(R1,C1,I1), on_island(R2,C2,I2).\nlink(I1,I2) :- link(I2,I1).\n\n% Player is randomly placed\n1 { at(R,C,player) : cell(R,C), at(R,C,land) } 1.\nplayer_on_island(I) :- at(R,C,player), on_island(R,C,I), island(I).\n% Flag is randomly placed\n1 { at(R,C,flag) : cell(R,C), at(R,C,land) } 1.\nflag_on_island(I) :- at(R,C,flag), on_island(R,C,I), island(I).\n% Reachable from each other, but not too close\nreachable(I,I) :- island(I).\nreachable(I1,I3) :- island(I1), island(I2),\n    island(I3), reachable(I2,I3), link(I1,I2).\n:- player_on_island(I), flag_on_island(I).\n:- player_on_island(I1), flag_on_island(I2), link(I1,I2).\n:- player_on_island(I1), flag_on_island(I2),\n    not reachable(I1,I2).\n\n:- island(I1), island(I2), link(I1,I2),\n    not link(I1,I3) : island(I3), I3 != I1, I3 != I2.\n\n% % Randomize level generation\n#heuristic at(RANDINT(1,8),RANDINT(1,12),player). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),flag). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),water). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),water). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),water). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),water). [10,true]\n\n% Visualization info\ndecorate(game_type,grid).\ndecorate(label,flag,font_f024).\ndecorate(label,player,font_f007).\ndecorate(label,bridge,font_25a0).\ndecorate(label,broken_bridge,font_2717).\ndecorate(label,possible_bridge,font_2022).\ndecorate(label,water,empty).\ndecorate(label,land,empty).\n\ndecorate(bgcolor,R,C,ddf) :- at(R,C,water).\n",
  "visibility_program": "% Everything is visible\nobserve(at(R,C,O)) :- at(R,C,O).",
  "player_move_program": "% Hints:\n% - Wait for the attacker on a cycle somewhere, until they are near\n% - then rotate so that you're closer to the flag than the attacker\n% - then run for the flag",
  "nature_program": "% Player can do at most one action per time step\ninvalid_move :- do(X), do(Y), X != Y.\nnext(R,C,player) :- invalid_move, at(R,C,player).\n\n% Effect of move(up;down;left;right): the player moves in the appropriate direction\nmove_result(R2,C2) :- do(move(D)), direction(D),\n    at(R1,C1,player), movement(R1,C1,R2,C2,D).\nnext(R,C,player) :- move_result(R,C).\nnext(R,C,player) :- at(R,C,player), not move_result(R',C') : cell(R',C').\n\n% The player can't run through trees\n:- next(R,C,player), at(R,C,tree).\n\n% Flag and trees stays in place\nnext(R,C,flag) :- at(R,C,flag).\nnext(R,C,tree) :- at(R,C,tree).",
  "goal_program": "% Goal: reach the flag\nwin :- at(R,C,player), at(R,C,flag).\n\n% You lose if time runs out..\nlose(timeout) :- current_time(T), setting(time_bound(S)), T >= S.",
  "level_state": "at(1,1,land).\nat(2,1,land).\nat(3,1,land).\nat(5,1,land).\nat(6,1,land).\nat(7,1,land).\nat(8,1,land).\nat(1,2,land).\nat(2,2,land).\nat(3,2,land).\nat(5,2,land).\nat(6,2,land).\nat(7,2,land).\nat(8,2,land).\nat(1,3,land).\nat(2,3,land).\nat(3,3,land).\nat(5,3,land).\nat(6,3,land).\nat(7,3,land).\nat(8,3,land).\nat(1,4,land).\nat(2,4,land).\nat(3,4,land).\nat(1,5,land).\nat(2,5,land).\nat(3,5,land).\nat(5,5,land).\nat(6,5,land).\nat(7,5,land).\nat(8,5,land).\nat(1,6,land).\nat(2,6,land).\nat(3,6,land).\nat(5,6,land).\nat(6,6,land).\nat(7,6,land).\nat(8,6,land).\nat(1,7,land).\nat(2,7,land).\nat(3,7,land).\nat(5,7,land).\nat(6,7,land).\nat(7,7,land).\nat(8,7,land).\nat(1,8,land).\nat(2,8,land).\nat(3,8,land).\nat(5,8,land).\nat(6,8,land).\nat(7,8,land).\nat(8,8,land).\nat(2,10,land).\nat(3,10,land).\nat(4,10,land).\nat(5,10,land).\nat(7,10,land).\nat(8,10,land).\nat(2,11,land).\nat(3,11,land).\nat(4,11,land).\nat(5,11,land).\nat(7,11,land).\nat(8,11,land).\nat(2,12,land).\nat(3,12,land).\nat(4,12,land).\nat(5,12,land).\nat(7,12,land).\nat(8,12,land).\nat(4,1,water).\nat(4,2,water).\nat(4,3,water).\nat(4,4,water).\nat(5,4,water).\nat(6,4,water).\nat(7,4,water).\nat(8,4,water).\nat(4,5,water).\nat(4,6,water).\nat(4,7,water).\nat(4,8,water).\nat(1,9,water).\nat(2,9,water).\nat(3,9,water).\nat(4,9,water).\nat(5,9,water).\nat(6,9,water).\nat(7,9,water).\nat(8,9,water).\nat(1,10,water).\nat(6,10,water).\nat(1,11,water).\nat(6,11,water).\nat(1,12,water).\nat(6,12,water).\nat(3,3,flag).\nat(8,8,player).\nat(4,3,bridge).\nat(5,4,bridge).\nat(3,9,bridge).\nat(8,9,bridge).\nat(6,11,bridge).\nat(4,1,broken_bridge).\nat(8,4,broken_bridge).\nat(4,7,broken_bridge).",
  "level_settings": "setting(grid_width(12)).\nsetting(grid_height(8)).\nsetting(time_bound(100)).\nsetting(col(1)).\nsetting(col(2)).\nsetting(col(3)).\nsetting(col(4)).\nsetting(col(5)).\nsetting(col(6)).\nsetting(col(7)).\nsetting(col(8)).\nsetting(col(9)).\nsetting(col(10)).\nsetting(col(11)).\nsetting(col(12)).\nsetting(row(1)).\nsetting(row(2)).\nsetting(row(3)).\nsetting(row(4)).\nsetting(row(5)).\nsetting(row(6)).\nsetting(row(7)).\nsetting(row(8)).\ndecorate(game_type,grid).\ndecorate(label,flag,font_f024).\ndecorate(label,player,font_f007).\ndecorate(label,bridge,font_25a0).\ndecorate(label,broken_bridge,font_2717).\ndecorate(label,possible_bridge,font_2022).\ndecorate(label,water,empty).\ndecorate(label,land,empty).\ndecorate(bgcolor,4,1,ddf).\ndecorate(bgcolor,4,2,ddf).\ndecorate(bgcolor,4,3,ddf).\ndecorate(bgcolor,4,4,ddf).\ndecorate(bgcolor,5,4,ddf).\ndecorate(bgcolor,6,4,ddf).\ndecorate(bgcolor,7,4,ddf).\ndecorate(bgcolor,8,4,ddf).\ndecorate(bgcolor,4,5,ddf).\ndecorate(bgcolor,4,6,ddf).\ndecorate(bgcolor,4,7,ddf).\ndecorate(bgcolor,4,8,ddf).\ndecorate(bgcolor,1,9,ddf).\ndecorate(bgcolor,2,9,ddf).\ndecorate(bgcolor,3,9,ddf).\ndecorate(bgcolor,4,9,ddf).\ndecorate(bgcolor,5,9,ddf).\ndecorate(bgcolor,6,9,ddf).\ndecorate(bgcolor,7,9,ddf).\ndecorate(bgcolor,8,9,ddf).\ndecorate(bgcolor,1,10,ddf).\ndecorate(bgcolor,6,10,ddf).\ndecorate(bgcolor,1,11,ddf).\ndecorate(bgcolor,6,11,ddf).\ndecorate(bgcolor,1,12,ddf).\ndecorate(bgcolor,6,12,ddf)."
}
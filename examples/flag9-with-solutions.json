{
  "aux_program": "% Predicates for (adjacent) cells\ncell(R,C) :- setting(row(R)), setting(col(C)).\ndirection(left;right;up;down).\nopposite_direction(left,right).\nopposite_direction(up,down).\nopposite_direction(D1,D2) :- opposite_direction(D2,D1).\nmovement(R,C,R,C+1,right) :- cell(R,C), cell(R,C+1).\nmovement(R,C,R,C-1,left) :- cell(R,C), cell(R,C-1).\nmovement(R,C,R+1,C,down) :- cell(R,C), cell(R+1,C).\nmovement(R,C,R-1,C,up) :- cell(R,C), cell(R-1,C).\nadjacent(R1,C1,R2,C2) :- direction(D), movement(R1,C1,R2,C2,D).",
  "level_gen_program": "% The game is played on a 12x8 grid\n#const w=12.\n#const h=8.\n#const n=w*h.\nsetting(grid_width(w)).\nsetting(grid_height(h)).\nsetting(row(1..H)) :- setting(grid_height(H)).\nsetting(col(1..W)) :- setting(grid_width(W)).\n\n% Time bound: 100 steps\nsetting(time_bound(100)).\n\n% Create some islands\n1 { num_islands(4..8) } 1.\nisland(1..N) :- num_islands(N).\n1 { topleft(R,C,I) : cell(R,C) } 1 :- island(I).\n1 { bottomright(R,C,I) : cell(R,C) } 1 :- island(I).\n:- island(I), topleft(R1,C1,I), bottomright(R2,C2,I), R1 >= R2.\n:- island(I), topleft(R1,C1,I), bottomright(R2,C2,I), C1 >= C2.\n% that are not too big..\n:- island(I), topleft(R1,C1,I), bottomright(R2,C2,I),\n    (R2-R1+1)*(C2-C1+1) >= 12.\n% and that are non-overlapping..\non_island(R,C,I) :- cell(R,C), island(I),\n    topleft(R1,C1,I), bottomright(R2,C2,I),\n    R1 <= R, R <= R2, C1 <= C, C <= C2.\n:- cell(R,C), on_island(R,C,I1), on_island(R,C,I2), I1 != I2.\n% and even separated by water..\n:- adjacent(R1,C1,R2,C2), on_island(R1,C1,I1), on_island(R2,C2,I2), I1 != I2.\n\n% Define land and water based on the islands\nat(R,C,land) :- on_island(R,C,I), island(I).\nat(R,C,water) :- cell(R,C), not at(R,C,land).\n\n% Forbid 2x2 squares of water\n:- cell(R,C), cell(R,C+1), cell(R+1,C), cell(R+1,C+1),\n    at(R,C,water), at(R,C+1,water), at(R+1,C,water), at(R+1,C+1,water).\n\n% Generate possible bridge locations between the islands\n{ connection(R,C) : cell(R,C), at(R,C,water) }.\n:- adjacent(R1,C1,R2,C2), connection(R1,C1), connection(R2,C2).\nconnection_justified(R,C) :- connection(R,C), direction(D),\n    movement(R,C,R1,C1,D1), at(R1,C1,land),\n    opposite_direction(D1,D2),\n    movement(R,C,R2,C2,D2), at(R2,C2,land).\n:- connection(R,C), not connection_justified(R,C).\n\n% The islands must form a connected graph with possible bridges\npos_link(I1,I2) :- island(I1), island(I2), I1 < I2, connection(R,C),\n    movement(R1,C1,R,C,D), movement(R,C,R2,C2,D), direction(D),\n    on_island(R1,C1,I1), on_island(R2,C2,I2).\npos_link(I1,I2) :- pos_link(I2,I1).\ntransitive_pos_link(I1,I2) :- pos_link(I1,I2).\ntransitive_pos_link(I1,I3) :- pos_link(I1,I2), transitive_pos_link(I2,I3).\n:- island(I1), island(I2), I1 != I2, not transitive_pos_link(I1,I2).\n\n% For each possible bridge, either it's broken or not\n1 { at(R,C,bridge); at(R,C,broken_bridge) } 1 :- connection(R,C).\n% and there must be a significant number of broken bridges\n:- B = #count { R,C : at(R,C,bridge) },\n    NB = #count { R,C : at(R,C,broken_bridge) },\n    |B-NB| > 2.\n\n% Define links with (non-broken) bridges between islands\nlink(I1,I2) :- island(I1), island(I2), I1 < I2, at(R,C,bridge),\n    movement(R1,C1,R,C,D), movement(R,C,R2,C2,D), direction(D),\n    on_island(R1,C1,I1), on_island(R2,C2,I2).\nlink(I1,I2) :- link(I2,I1).\n\n% The player is randomly placed\n1 { at(R,C,player) : cell(R,C), at(R,C,land) } 1.\nplayer_on_island(I) :- at(R,C,player), on_island(R,C,I), island(I).\n% The flag is randomly placed\n1 { at(R,C,flag) : cell(R,C), at(R,C,land) } 1.\nflag_on_island(I) :- at(R,C,flag), on_island(R,C,I), island(I).\n% They are reachable from each other, but not too close\nreachable(I1,I2) :- reachable(I1,I2,D).\nreachable(I,I,0) :- island(I).\nreachable(I1,I3,D) :-\n    num_islands(N), D <= N,\n    island(I1), island(I2), island(I3),\n    link(I1,I2), reachable(I2,I3,D-1).\n:- player_on_island(I), flag_on_island(I).\n:- player_on_island(I1), flag_on_island(I2), link(I1,I2).\n:- player_on_island(I1), flag_on_island(I2),\n    not reachable(I1,I2).\n:- player_on_island(I1), flag_on_island(I2),\n    reachable(I1,I2,2).\n\n% All islands must be connected to some other island\n:- island(I1),\n    not link(I1,I2) : island(I2), I1 != I2.\n\n% Randomize level generation\n#heuristic at(RANDINT(1,8),RANDINT(1,12),player). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),flag). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),water). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),water). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),water). [10,true]\n#heuristic at(RANDINT(1,8),RANDINT(1,12),water). [10,true]\n#heuristic topleft(RANDINT(1,8),RANDINT(1,12),1). [10,true]\n#heuristic topleft(RANDINT(1,8),RANDINT(1,12),2). [10,true]\n#heuristic topleft(RANDINT(1,8),RANDINT(1,12),3). [10,true]\n#heuristic topleft(RANDINT(1,8),RANDINT(1,12),4). [10,true]\n\n% Visualization info\ndecorate(game_type,grid).\ndecorate(label,flag,font_f024).\ndecorate(label,player,font_f007).\ndecorate(label,bridge,font_25a0).\ndecorate(label,broken_bridge,font_2717).\ndecorate(label,connection,font_2022).\ndecorate(label,water,empty).\ndecorate(label,land,empty).",
  "visibility_program": "% 'Fog-of-war' is a ring of one around the player\nobserve(fog(R1,C1)) :-\n    setting(row(R1)), setting(col(C1)),\n    at(R2,C2,player), |C1-C2| >= 2.\nobserve(fog(R1,C1)) :-\n    setting(row(R1)), setting(col(C1)),\n    at(R2,C2,player), |R1-R2| >= 2.\n\n% Without fog, observe everything\nobserve(at(R,C,O)) :- at(R,C,O), not observe(fog(R,C)).\n\n% With fog, only observe water/land and connections\nobserve(at(R,C,water)) :- at(R,C,water), observe(fog(R,C)).\nobserve(at(R,C,land)) :- at(R,C,land), observe(fog(R,C)).\nobserve(at(R,C,connection)) :- at(R,C,bridge), observe(fog(R,C)).\nobserve(at(R,C,connection)) :- at(R,C,broken_bridge), observe(fog(R,C)).\n\n% Color the water appropriately (with/without fog)\ndecorate(bgcolor,R,C,hex_aac) :- at(R,C,water), observe(fog(R,C)).\ndecorate(bgcolor,R,C,hex_ddf) :- at(R,C,water), not observe(fog(R,C)).",
  "player_move_program": "% Number cells for tie-breaking\ncell_no(R,C,N) :- setting(grid_width(W)), cell(R,C), N = (W*(R-1))+C.\n\n% Remember where you've seen what\nremember(at(R,C,flag)) :- observe(at(R,C,flag)).\nremember(at(R,C,empty)) :- observe(at(R,C,land)),\n    observe(at(R',C',player)), |R'-R| <= 1, |C'-C| <= 1,\n    not observe(at(R,C,flag)).\nremember(at(R,C,bridge)) :- observe(at(R,C,bridge)).\nremember(at(R,C,broken_bridge)) :- observe(at(R,C,broken_bridge)).\nremember(at(R,C,passable)) :- remember(at(R,C,empty)).\nremember(at(R,C,passable)) :- remember(at(R,C,bridge)).\nmemory(at(R,C,O)) :- remember(at(R,C,O)).\nunknown(R,C) :- cell(R,C), observe(at(R,C,connection)),\n    not memory(at(R,C,bridge)),\n    not memory(at(R,C,broken_bridge)).\nunknown(R,C) :- cell(R,C), observe(at(R,C,land)),\n    not memory(at(R,C,empty)).\n\n% Consider where the player *can* next move to\npossible_target(PR,PC) :-\n    cell(PR,PC), observe(at(PR,PC,land)),\n    observe(at(R,C,player)), adjacent(R,C,PR,PC).\npossible_target(PR,PC) :-\n    cell(PR,PC), observe(at(PR,PC,bridge)),\n    observe(at(R,C,player)), adjacent(R,C,PR,PC).\n\n% Choose among those that are on a shortest path to a\n% yet unexplored cell..\nmax_path_length(M) :- setting(grid_width(W)), setting(grid_height(H)), M=W+H.\npath_length(0..M) :- max_path_length(M).\nreachable_within(PR,PC,PR,PC,1) :- possible_target(PR,PC).\nreachable_within(PR,PC,R1,C1,I) :-\n    possible_target(PR,PC), path_length(I),\n    cell(R1,C1), reachable_within(PR,PC,R2,C2,I-1),\n    adjacent(R1,C1,R2,C2), memory(at(R2,C2,passable)).\nselect_possible_target(PR,PC) :-\n    not path_to_flag_known,\n    reachable_within(PR,PC,R,C,I), unknown(R,C),\n    not reachable_within(PR',PC',R',C',J) :\n        possible_target(PR',PC'), unknown(R',C'), path_length(J), J < I.\n\n% Or if you know how to get to the flag..\npath_to_flag_known :-\n    reachable_within(PR,PC,R,C,I),\n    possible_target(PR,PC), path_length(I),\n    memory(at(R,C,flag)).\nselect_possible_target(PR,PC) :-\n    path_to_flag_known,\n    reachable_within(PR,PC,R,C,I), memory(at(R,C,flag)),\n    not reachable_within(PR',PC',R',C',J) :\n        possible_target(PR',PC'), memory(at(R',C',flag)), path_length(J), J < I.\n\n% .. and pick one of these (using tie-breaking if needed) ..\ntarget(R,C) :- select_possible_target(R,C),\n    not select_possible_target(R',C') : cell(R',C'), (R',C') < (R,C).\n\n% .. and move towards it\ndo(move(down)) :- observe(at(R,C,player)), target(R+1,C).\ndo(move(up)) :- observe(at(R,C,player)), target(R-1,C).\ndo(move(left)) :- observe(at(R,C,player)), target(R,C-1).\ndo(move(right)) :- observe(at(R,C,player)), target(R,C+1).\n",
  "nature_program": "% Player can do at most one action per time step\n:- do(X), do(Y), X != Y.\n\n% Effect of move(up;down;left;right): the player moves in the appropriate direction\nmove_result(R2,C2) :- do(move(D)), direction(D),\n    at(R1,C1,player), movement(R1,C1,R2,C2,D).\nnext(R,C,player) :- move_result(R,C).\nnext(R,C,player) :- at(R,C,player), not move_result(R',C') : cell(R',C').\n\n% The player can't run through water (without a non-broken bridge)\n:- next(R,C,player), at(R,C,water), not at(R,C,bridge).\n\n% Flag, land, water and (broken) bridges stay in place\nnext(R,C,flag) :- at(R,C,flag).\nnext(R,C,land) :- at(R,C,land).\nnext(R,C,water) :- at(R,C,water).\nnext(R,C,bridge) :- at(R,C,bridge).\nnext(R,C,broken_bridge) :- at(R,C,broken_bridge).",
  "goal_program": "% Goal: reach the flag\nwin :- at(R,C,player), at(R,C,flag).\n\n% You lose if time runs out..\nlose(timeout) :- current_time(T), setting(time_bound(S)), T >= S.",
  "level_state": "at(6,1,land).\nat(7,1,land).\nat(2,2,land).\nat(3,2,land).\nat(4,2,land).\nat(6,2,land).\nat(7,2,land).\nat(2,3,land).\nat(3,3,land).\nat(4,3,land).\nat(6,3,land).\nat(7,3,land).\nat(6,4,land).\nat(7,4,land).\nat(1,5,land).\nat(2,5,land).\nat(4,5,land).\nat(5,5,land).\nat(1,6,land).\nat(2,6,land).\nat(4,6,land).\nat(5,6,land).\nat(7,6,land).\nat(8,6,land).\nat(4,7,land).\nat(5,7,land).\nat(7,7,land).\nat(8,7,land).\nat(1,8,land).\nat(2,8,land).\nat(3,8,land).\nat(1,9,land).\nat(2,9,land).\nat(3,9,land).\nat(5,9,land).\nat(6,9,land).\nat(7,9,land).\nat(5,10,land).\nat(6,10,land).\nat(7,10,land).\nat(2,11,land).\nat(3,11,land).\nat(5,11,land).\nat(6,11,land).\nat(7,11,land).\nat(2,12,land).\nat(3,12,land).\nat(1,1,water).\nat(2,1,water).\nat(3,1,water).\nat(4,1,water).\nat(5,1,water).\nat(8,1,water).\nat(1,2,water).\nat(5,2,water).\nat(8,2,water).\nat(1,3,water).\nat(5,3,water).\nat(8,3,water).\nat(1,4,water).\nat(2,4,water).\nat(3,4,water).\nat(4,4,water).\nat(5,4,water).\nat(8,4,water).\nat(3,5,water).\nat(6,5,water).\nat(7,5,water).\nat(8,5,water).\nat(3,6,water).\nat(6,6,water).\nat(1,7,water).\nat(2,7,water).\nat(3,7,water).\nat(6,7,water).\nat(4,8,water).\nat(5,8,water).\nat(6,8,water).\nat(7,8,water).\nat(8,8,water).\nat(4,9,water).\nat(8,9,water).\nat(1,10,water).\nat(2,10,water).\nat(3,10,water).\nat(4,10,water).\nat(8,10,water).\nat(1,11,water).\nat(4,11,water).\nat(8,11,water).\nat(1,12,water).\nat(4,12,water).\nat(5,12,water).\nat(6,12,water).\nat(7,12,water).\nat(8,12,water).\nat(6,9,flag).\nat(2,5,player).\nat(2,4,bridge).\nat(3,5,bridge).\nat(7,5,bridge).\nat(2,7,bridge).\nat(3,10,bridge).\nat(4,11,bridge).\nat(5,3,broken_bridge).\nat(6,6,broken_bridge).\nat(7,8,broken_bridge).\nat(4,9,broken_bridge).",
  "level_settings": "setting(grid_width(12)).\nsetting(grid_height(8)).\nsetting(time_bound(100)).\nsetting(col(1)).\nsetting(col(2)).\nsetting(col(3)).\nsetting(col(4)).\nsetting(col(5)).\nsetting(col(6)).\nsetting(col(7)).\nsetting(col(8)).\nsetting(col(9)).\nsetting(col(10)).\nsetting(col(11)).\nsetting(col(12)).\nsetting(row(1)).\nsetting(row(2)).\nsetting(row(3)).\nsetting(row(4)).\nsetting(row(5)).\nsetting(row(6)).\nsetting(row(7)).\nsetting(row(8)).\ndecorate(game_type,grid).\ndecorate(label,flag,font_f024).\ndecorate(label,player,font_f007).\ndecorate(label,bridge,font_25a0).\ndecorate(label,broken_bridge,font_2717).\ndecorate(label,connection,font_2022).\ndecorate(label,water,empty).\ndecorate(label,land,empty)."
}
